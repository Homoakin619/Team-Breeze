openapi: 3.0.3
info:
  title: Authentication API
  description: API for user authentication and registration using email/password, magic links, and social authentication.
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
tags:
  - name: Auth
    description: Authentication and Registration
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                username:
                  type: string
                  example: johndoe
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                password:
                  type: string
                  format: password
                  example: securepassword123
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: 507f1f77bcf86cd799439011
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid input

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login using email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User logged in successfully
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Invalid credentials

  /auth/magic-link:
    post:
      tags:
        - Auth
      summary: Request a magic link for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        200:
          description: Magic link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Magic link sent to your email
                  data:
                    type: object
                    example: null
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid input

  /auth/magic-link/verify:
    get:
      tags:
        - Auth
      summary: Verify a magic link and log in
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: The token sent via magic link
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User logged in successfully
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid token
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Token expired or invalid

  /auth/social:
    post:
      tags:
        - Auth
      summary: Login using social authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  example: google
                accessToken:
                  type: string
                  example: ya29.a0ARrdaM...
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User logged in successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "1234567890"
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      username:
                        type: string
                        example: johndoe
                      displayName:
                        type: string
                        example: John Doe
                      profilePictureUrl:
                        type: string
                        example: "https://example.com/profile-picture.jpg"
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid input
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Invalid access token

  /auth/password-reset:
    post:
      tags:
        - Auth
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        200:
          description: Password reset link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Password reset link sent to your email
                  data:
                    type: object
                    example: null
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid input

  /auth/password-reset/confirm:
    post:
      tags:
        - Auth
      summary: Confirm password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: reset-token
                newPassword:
                  type: string
                  format: password
                  example: newpassword123
      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Password reset successfully
                  data:
                    type: object
                    example: null
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid input
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Invalid or expired token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439011
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: johndoe
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        createdAt:
          type: string
          format: date-time
          example: 2023-07-12T07:20:50.52Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-07-12T07:20:50.52Z
